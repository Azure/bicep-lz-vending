# Example: .github/workflows/arm-docs.yaml

name: Generate/Update Module Docs Using PSDocs.Azure

on:
  push:
    branches: 
    - 'main'
    paths:
      - '**.bicep'
  workflow_dispatch: {}

env:
  branch_name: "update-module-docs-psdocs-azure"
  pr_title: "Update module docs from PSDocs.Azure (automated)"
  pr_body: "This is an automated 'pull_request' containing updates to the Bicep modules documentation that has been generated via PSDocs.Azure.\nPlease review the 'files changed' tab to review changes."

jobs:
  psdocs_azure:
    name: Generate Markdown
    runs-on: ubuntu-latest
    steps:

    - name: Checkout
      uses: actions/checkout@v2
      with:
        path: ${{ github.repository }}
        fetch-depth: 0

    - name: Configure local git
      run: |
        git config user.name github-actions
        git config user.email action@github.com
      working-directory: ${{ github.repository }}

    - name: Create and checkout branch
      run: |
        BRANCH_URL="repos/${{ github.repository }}/branches"
        JQ_FILTER=".[] | select(.name == \"${{ env.branch_name }}\").name"
        CHECK_BRANCH_ORIGIN=$(gh api $BRANCH_URL | jq -r "$JQ_FILTER")
        if [ -z "$CHECK_BRANCH_ORIGIN" ]
        then
          echo "Checkout local branch (create new, no origin)..."
          git checkout -b ${{ env.branch_name }}
        else
          echo "Checkout local branch (create new, track from origin)..."
          git checkout -b ${{ env.branch_name }} --track origin/${{ env.branch_name }}
        fi
      working-directory: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}

    - name: Update Policy Definition Bicep Input Files
      run: |
        Write-Information "==> Running PowerShell script..." -InformationAction Continue
        .github/scripts/Invoke-PSDocsAzure.ps1
      shell: pwsh
      working-directory: ${{ github.repository }}

    - name: Check for changes
      id: git_status
      run: |
        CHECK_GIT_STATUS=($(git status -s))
        git status -s
        echo "::set-output name=changes::${#CHECK_GIT_STATUS[@]}"
      working-directory: ${{ github.repository }}

    - name: Add files, commit and push
      if: steps.git_status.outputs.changes > 0
      run: |
        echo "Pushing changes to origin..."
        git add infra-as-code/bicep/modules/policy/definitions/lib
        git add infra-as-code/bicep/modules/policy/assignments/lib
        git commit -m '${{ env.pr_title }}'
        git push origin ${{ env.branch_name }}
      working-directory: ${{ github.repository }}

    - name: Create pull request
      if: steps.git_status.outputs.changes > 0
      run: |
        HEAD_LABEL="${{ github.repository_owner }}:${{ env.branch_name }}"
        BASE_LABEL="${{ github.repository_owner }}:$(echo '${{ github.ref }}' | sed 's:refs/heads/::')"
        PULL_REQUEST_URL="repos/${{ github.repository }}/pulls"
        JQ_FILTER=".[] | select(.head.label == \"$HEAD_LABEL\") | select(.base.label == \"$BASE_LABEL\") | .url"
        CHECK_PULL_REQUEST_URL=$(gh api $PULL_REQUEST_URL | jq -r "$JQ_FILTER")
        if [ -z "$CHECK_PULL_REQUEST_URL" ]
        then
          CHECK_PULL_REQUEST_URL=$(gh pr create \
          --title "${{ env.pr_title }}" \
          --body "${{ env.pr_body }}" \
          --base "${{ github.ref }}" \
          --head "${{ env.branch_name }}" \
          --draft)
          echo "Created new PR: $CHECK_PULL_REQUEST_URL"
        else
          echo "Existing PR found: $CHECK_PULL_REQUEST_URL"
        fi
      working-directory: ${{ github.repository }}
      env:
        GITHUB_TOKEN: ${{ secrets.github_token }}