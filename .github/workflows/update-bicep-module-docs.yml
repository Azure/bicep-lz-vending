---
name: Update Bicep Module Docs for PR

##########################################
# Start the job on push for all branches #
##########################################

# yamllint disable-line rule:truthy
on:
  pull_request_target:
    types:
      - opened
      - reopened
      - synchronize
      - ready_for_review
    paths:
      - '**.bicep'

env:
  github_user_name: 'github-actions'
  github_email: '41898282+github-actions[bot]@users.noreply.github.com'
  github_commit_message: 'Auto-update Bicep Module Docs for PR ${{ github.event.number }}'
  github_pr_number: ${{ github.event.number }}
  github_pr_repo: ${{ github.event.pull_request.head.repo.full_name }}

permissions:
  contents: write

###############
# Set the Job #
###############

jobs:
  update-portal:
    name: Update Bicep Module Docs for PR
    runs-on: ubuntu-latest

    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Show env
        run: env | sort

      - name: Check out PR
        run: |
          echo "==> Check out PR..."
          gh pr checkout "$github_pr_number"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Configure local git
        run: |
          echo "git user name  : $github_user_name"
          git config --global user.name "$github_user_name"
          echo "git user email : $github_email"
          git config --global user.email "$github_email"
          git config --global core.autocrlf input

      - name: List Currently Installed Bicep Version
        shell: pwsh
        run: |
          $bicepVersion = bicep --version
          Write-Information "=====> Currently installed Bicep version is: $bicepVersion <=====" -InformationAction Continue

      - name: Install latest version of Bicep
        shell: sh
        run: |
          # From https://docs.microsoft.com/en-us/azure/azure-resource-manager/bicep/install#linux
          # Fetch the latest Bicep CLI binary
          curl -Lo bicep https://github.com/Azure/bicep/releases/latest/download/bicep-linux-x64
          # Mark it as executable
          chmod +x ./bicep
          # Add bicep to your PATH (requires admin)
          sudo mv ./bicep /usr/local/bin/bicep
          # Verify you can now access the 'bicep' command
          bicep --help
          # Done!

      - name: List Now Installed Bicep Version
        shell: pwsh
        run: |
          $bicepVersion = bicep --version
          Write-Information "=====> Now installed Bicep version is: $bicepVersion <=====" -InformationAction Continue

      - name: Install PSDocs.Azure Module
        shell: pwsh
        run: |
          Set-PSRepository PSGallery -InstallationPolicy Trusted
          Install-Module -Name 'PSDocs.Azure'

      - name: Update Bicep Module Docs for PR
        shell: pwsh
        run: |
          ./.github/scripts/Invoke-PSDocsAzure.ps1

      - name: Check git status
        run: |
          echo "==> Check git status..."
          git status --short --branch

      - name: Stage changes
        run: |
          echo "==> Stage changes..."
          mapfile -t STATUS_LOG < <(git status --short | grep .md)
          if [ ${#STATUS_LOG[@]} -gt 0 ]; then
              echo "Found changes to the following markdown files:"
              printf "%s\n" "${STATUS_LOG[@]}"
              git add ':/*.md'
          else
              echo "No changes to add."
          fi

      - name: Push changes
        run: |
          echo "==> Check git diff..."
          mapfile -t GIT_DIFF < <(git diff --cached)
          printf "%s\n" "${GIT_DIFF[@]}"

          if [ ${#GIT_DIFF[@]} -gt 0 ]; then

              echo "==> Commit changes..."
              git commit --message "$github_commit_message [$GITHUB_ACTOR/${GITHUB_SHA::8}]"

              echo "==> Push changes..."
              echo "Pushing changes to: $github_pr_repo"
              git push "https://$GITHUB_TOKEN@github.com/$github_pr_repo.git" "HEAD:$GITHUB_HEAD_REF"

          else
              echo "No changes found."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Push empty commit for tests
        run: |
          echo "==> Commit empty commit..."
          git commit --allow-empty --message "$github_commit_message [$GITHUB_ACTOR/${GITHUB_SHA::8}]"

          echo "==> Pushing empty commit changes..."
          echo "Pushing empty commit to: $github_pr_repo"
          git push "https://$GITHUB_TOKEN@github.com/$github_pr_repo.git" "HEAD:$GITHUB_HEAD_REF"
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
